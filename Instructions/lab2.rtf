{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c6667\c6667\c6667;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This lab is based on Chapter 2, page 73(7ed); page 75 (8ed, 9ed), problem #12, Diamond pattern, but it adds a bit more work. The steps are:\cb1 \
\
\cb3 1) Write code that displays a 7-line diamond pattern on the screen. This can be done using a double-nested for-loop. The inner loop displays a line of stars, one column (space ' ' or star \'91*\'92) at a time. The outer loop displays multiple lines, one row (\'93*****\'94) at a time. This 7-line diamond pattern can easily be done with 7 cout statements, but then you cannot complete the next step.\cb1 \
\cb3 Test this. If you stop here, you have earned up to 12 points max.\cb1 \
\
\cb3 2) Instead of only making diamonds with exactly 7 lines, ask the user how many lines to make the diamond, then make the diamond with the size desired. If the size requested is <=0, don\'92t make a diamond. It should work for both even and odd number of lines. See chapter 5, top of page 267 (7ed), page 270 (8ed), page 271 (9ed) for code that will loop using a for-loop. Position diamonds to the far left. Don't display unnecessary extra columns of spaces on the far left or right.\cb1 \
\cb3 Test this. If you stop here, you have earned up to 16 points max.\cb1 \
\
\cb3 3) It is tedious to use and test a program if it does one thing and stops. In this step, put the diamond drawing code inside another loop. It is now triple-nested. The outer loop should repeatedly prompt the user for the number of lines to make the diamond. If the number is <= 0, quit. Otherwise, make a diamond pattern with the number of lines entered. Keep asking the user for the number of lines to draw, then draw one diamond shape, UNTIL the user wants to quit. A size of <=0 means to quit. This looping pattern is similar to the one described in Lab 1.\cb1 \
\cb3 Test this. If you stop here, you have earned up to 20 points max.\cb1 \
\
\cb3 Extra credit: When creating the row of spaces ("\'a0 ") and stars (\'93***\'94), you can construct a string with exactly the number of characters (' ' or \'91*\'92') you want in one statement without using a loop. Hint: This is described in Table 12-6 on page 806 (7ed) and Table 12-4 on page 817 (8ed). This string constructor was removed from Table 12-3 on page 840 (9ed), but here is a hint: string(int n, char ch); This simplifies the code by eliminating the inner-most loop.\cb1 \
\cb3 Test this. If you stop here, you have earned up to 22 points max. This is the most possible points.\cb1 \
\
\cb3 Example:\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 Enter the number of rows desired to make a diamond pattern (0 to quit): 5
\f0 \cb1 \

\f1 \cb3 \'a0\'a0*
\f0 \cb1 \

\f1 \cb3 \'a0***
\f0 \cb1 \

\f1 \cb3 *****
\f0 \cb1 \

\f1 \cb3 \'a0***
\f0 \cb1 \

\f1 \cb3 \'a0\'a0*
\f0 \cb1 \
\

\f1 \cb3 Enter the number of rows desired to make a diamond pattern (0 to quit): 7
\f0 \cb1 \

\f1 \cb3 \'a0 \'a0*
\f0 \cb1 \

\f1 \cb3 \'a0\'a0***
\f0 \cb1 \

\f1 \cb3 \'a0*****
\f0 \cb1 \

\f1 \cb3 *******
\f0 \cb1 \

\f1 \cb3 \'a0*****
\f0 \cb1 \

\f1 \cb3 \'a0\'a0***
\f0 \cb1 \

\f1 \cb3 \'a0 \'a0*
\f0 \cb1 \
\

\f1 \cb3 Enter the number of rows desired to make a diamond pattern (0 to quit): 4
\f0 \cb1 \

\f1 \cb3 \'a0*
\f0 \cb1 \

\f1 \cb3 ***
\f0 \cb1 \

\f1 \cb3 ***
\f0 \cb1 \

\f1 \cb3 \'a0*
\f0 \cb1 \
\

\f1 \cb3 Enter the number of rows desired to make a diamond pattern (0 to quit): 0
\f0 \cb1 \

\f1 \cb3 Goodbye!
\f0 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 Hint: Each row consists of spaces and stars. To compute the correct number of spaces and stars for each row, consider making a table: line number, spaces, stars. Think of the relationship between: line number, number of spaces for that line, number of stars for that line. For help with this, look in \'93Program Samples\'94 for \'93Excel file to aid Lab 2: lines to diamonds\'94. This is a spreadsheet that helps to analyze the problem.\cb1 \
\
\cb3 As in Lab 1 and ALL LABS IN THIS COURSE:\cb1 \
\cb3 1) Add a comment block at the top of your code.\cb1 \
\cb3 2) Provide properly formatted C++ code.\cb1 \
\cb3 3) Paste the test run results at the bottom.\cb1 \
\cb3 The file name will be: TT10_L2_Lastname.cpp (replace Lastname, of course)}