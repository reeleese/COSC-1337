{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c6667\c6667\c6667;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww15280\viewh22400\viewkind0
\deftab720
\pard\pardeftab720\sl320\sa200\partightenfactor0

\f0\b\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Chapter 7, Programming challenges,\'a0Inventory Class. Depending on your textbook edition, this is:\'a0\'a0Challenge 15,\'a0page 482 (7e);\'a0Challenge 7,\'a0page 499 (8e);\'a0\'a0Challenge 7, page 501\'a0(9e)
\b0 . Design an Inventory class. Start with the textbook description on page 482 (7e), page 499 (8e), page 501 (9e).\
\pard\pardeftab720\sl300\sa200\partightenfactor0
\cf2 The older textbook (7e) lists 4 private variables and 10 public member functions. It is a good start, however, one of the private variables is redundant - it is dependent on two other related private variables. This allows the data to become out-of-sync or "stale". This is not good design practice (see textbook, page 400 (7e) "Avoiding Stale Data"). Identify the redundant variable, and eliminate it. Eliminate and/or modify related member functions to avoid the creation of stale or redundant data in the class. Implement the Inventory Class and use it as described in the textbook. (max 25 points).\
The newer textbooks (8e, 9e) corrected the problem of the redundant private data variable, and only lists 3 private variables (itemNumber, quantity, cost) and 9 public member functions. The textbook, page 422 (8ed, 9ed) "Avoiding Stale Data" explains why is it not good design practice to have dependencies between member variables. If you have the 8th or 9th edition, you don't have to remove the redundant variable, because the authors corrected this mistake. You should implement the Inventory Class and use it as described in the textbook. Despite removing the redundant private variable, the 8ed and 9ed still say to initialize the removed variable in constructor #2 (last sentence on page 499, 8ed; page 501, 9ed: "Then calls the setTotalCost function." which does not exist.). This is an error in the textbook as the missing variable cannot be initialized. (max 25 points).\
\pard\pardeftab720\sl240\sa200\partightenfactor0
\cf2 Write some driver code which tests this class. Test each member function.\'a0Your driver code should create at least 2 instances of this class, load them with valid data, and display the contents of each instance. Submit just one .cpp file. Do not create the class in a separate file (max 27 points).\
\pard\pardeftab720\sl320\sa200\partightenfactor0

\b \cf2 If your C++ is stronger
\b0 , add a string to the private variable portion of the class. The string describes the item. Add appropriate getter/setter methods (accessor/mutator) to utilize the string. Extend the driver program to ask: "How many items in inventory?" (Allow for up to 5 maximum). Loop as many times specified by the user (1 to 5) to load up the inventory with\'a0items. \'a0You can use an array to store the items, or have 5 variables: item1, item2, ... item5. Provide another loop to display each item, while keeping a subtotal of cost. At the end, output the total cost of\'a0the inventory. Test with 3 items. (Although the capacity is up to 5 items, your test output, pasted at the bottom, should demonstrate using at least 3 different inventory items, or "instances" of class Inventory.) Submit just one .cpp file. Do not create the class in a separate file. (max 30 points).\

\b If your C++ is really good
\b0 , add to the previous step: Provide the option to use FileIO (in\'a0
\b addition
\b0 \'a0to optional manual keyboard entry) to read\'a0and load the inventory items from a datafile of your making. This saves you the trouble of manually entering data; testing will be less work! Echo the data as it is read in for verification. Submit two files: one .cpp file with the class and main; and another\'a0data\'a0file. To keep your data file unique, use the file naming convention: DDHH_L7_Lastname.txt. Replace the DDHH with the course designator and Lastname with your last name.\'a0(max 33 points).\
}