{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c6667\c6667\c6667;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww14900\viewh22580\viewkind0
\deftab720
\pard\pardeftab720\sl360\sa200\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
/* INSTRUCTIONS: (OK to remove this big comment block, but keep smaller // comments.)\
\
  PLEASE PLACE NEW CODE NEAR COMMENT LABELS, PROVIDED FOR EACH STEP.\
\
  Step 1. (5 points)\
    In class CoinPurse, write two CoinPurse constructors:\
       default: set all coin counts to zero\
       2nd:     set all coin counts to initial values; use parameters for: quarter, dime, nickel, penny\
                IMPORTANT: prohibit negative values - if negative coin value given, use 0 instead.\
       tip: you can combine both of these into one constructor using default parameters\
\
  Step 2. (5 points)\
    In main, in one statement, declare a new CoinPurse object called purse1 and initialize\
    purse1 with: 4 quarters, 3 dimes, 2 nickels, 1 penny\
    \
  Step 3. (5 points)\
    In class CoinPurse, write the definition for a new public member function: total_value.\
    total_value returns the total value of all quarters, dimes, nickels and pennies\
    in a CoinPurse object. For example: a purse with 4 quarters, 3 dimes,\
    2 nickels and 1 penny has a total value of (4*25)+(3*10)+(2*5)+(1*1)=141 (cents)\
    \
  Step 4. (5 points)\
    In main, write code to call the total_value method on the purse1 object.\
    Display the returned value, which is the total value of the coins in purse1.\
    Format the output so it displays in dollars and cents. Example: $1.41\
    \
  Step 5. (5 points)\
    In class CoinPurse, implement a mutator/setter called set() which sets the\
    coin counts of all coins. Pre-validate any new coin counts; do not allow any\
    coin count to be less than zero. If the ANY of the coin counts are invalid\
    (negative), do not modify ANY coin counts. If the set() succeeds, return true;\
    if the set() fails, return false.\
    \
  Step 6. (5 points)\
    To avoid redundant code and insure proper validation, modify constructor(s)\
    as needed to call set() instead of having redundant checking code.\
\
  Step 7. (5 points)\
    In class CoinPurse, write a show() method that outputs the number of each\
    coin in the purse in one string, like this: "(q=4 d=3 n=2 p=1)" (don't << endl;)\
    Another option is to return a string, and then cout the resulting string, so\
    class Coin is no longer dependent upon iostream.\
\
  Step 8. (5 points)\
    In main, call set to change the values in purse1 to: 8 quarters, 7 dimes, 6 nickels, 5 pennies.\
    In main, Call show to display the contents of purse1 (number of each coin).\
\
  Step 9. (5 points)\
    In class CoinPurse, write one modify() method that modifies coin counts\
    using a positive (increment), negative (decrement) or zero (keep the same)\
    value. For example:\
}