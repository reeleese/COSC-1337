{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c6667\c6667\c6667;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww13760\viewh22400\viewkind0
\deftab720
\pard\pardeftab720\sl368\sa200\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 his lab was made by the instructor to practice using various features of C++ functions. These features are covered in the textbook in Chapter 6. You may start with demo code developed in class.\cb1 \uc0\u8232 \u8232 
\b \cb3 This is a very important lab. C++ functions are similar to Python functions, but have some different behaviors and features. It is very important to complete Lab 6 in preparation for Exam 1.
\b0 \cb1 \uc0\u8232 \u8232 \cb3 There are 6 skills to demonstrate in Lab 6:\cb1 \uc0\u8232 \cb3 1) Use functions. Functions sub-divide programming problems into independent parts.\cb1 \uc0\u8232 \cb3 2) Use function overloading, where several functions have the same name but different parameters.\cb1 \uc0\u8232 \cb3 3) Use pass-by-value and pass-by-reference parameters to functions.\cb1 \uc0\u8232 \cb3 4) Use static local variables, which work like global variables. Their value persists between function calls, yet they can only be used within the function.\cb1 \uc0\u8232 \cb3 5) Use default parameters, which take on a default value if a parameter is not specified.\cb1 \uc0\u8232 \cb3 6) Use const parameters, which specify that the parameter cannot change. const reference parameters make good sense for strings.\cb1 \uc0\u8232 \cb3 You get 4 points per skill, up to 24 points maximum. You do not have to do every skill to get 20 points.\cb1 \uc0\u8232 \u8232 \cb3 The problem scenario is to calculate the distance between two things. The two \'93things\'94 might be: two letters in the alphabet, two numbers on a number line or two points on a graph. We will use functions for three basic operations:\cb1 \uc0\u8232 \u8232 \cb3 1) Input data. The data could be: letter, number, or point (x, y). Call this twice to get two \'93things\'94.\cb1 \uc0\u8232 \cb3 2) Determine distance. The distance (dist for short) could be: between two letters, between two numbers, or between two points on a graph. For example: dist(\'91b\'92, \'91f\'92) is 4, dist(-5, 20) is 25; dist(0, 3, 4, 0) is 5.\cb1 \uc0\u8232 \cb3 3) Display the result. The result should be described with some explanatory text.\cb1 \uc0\u8232 \u8232 \cb3 The program structure is similar to previous programs. The main loop has menu options for: letter, number, point, quit. Start the program, output the menu prompt. Based on the chosen option, get two appropriate values; compute and display the distance between the values; and prompt again. Keep running until the user quits.\cb1 \uc0\u8232 \u8232 \cb3 There are three different \'93things\'94 and three different operations on these \'93things\'94, so you need nine functions. You need 3 overloaded input functions, 3 overloaded distance functions, and 3 overloaded display functions. An \'93overloaded function\'94 is a function with the same name as another function. For each \'93thing\'94, you input a pair of values, compute the distance between them, and display the distance.\cb1 \uc0\u8232 \u8232 \cb3 The three overloaded input functions look like this:\cb1 \uc0\u8232 \cb3 \'a0 char input(string prompt, string error_message); // for getting a letter\cb1 \uc0\u8232 \cb3 \'a0 float input(float min, float max, string prompt, string error_message); // for getting a number\cb1 \uc0\u8232 \cb3 \'a0 void input(double &x, double &y, string prompt); // for getting a point (x, y)\cb1 \uc0\u8232 \u8232 \cb3 Each input function works a little differently. For char, print the prompt; get a character. If the character is valid (a-z or A-Z) return it. If it is NOT valid, display the error message and try again. Use isalpha() to verify the character is alphabetic. Loop until a valid character is entered. For the number, print the prompt. As part of the prompt, print the acceptable range (min, max) allowed for the value. Get a value. If it is within the range, return it. If NOT valid, print the error message and try again. Loop until a valid (within range) number is entered.
\f1\fs20 \

\f0\fs32 For the point, you need to get two numbers, x and y. Since functions only return one object, use a void function (it returns nothing) but use two call-by-reference parameters. This allows the function to change two values in the caller\'92s scope.The input function for getting the two points does not provide parameters for min, max or error message.\'a0When input for a point is called, it should prompt for both the x and y values. Inside the input function, for each point, prompt the user for the point (x then y). If letters are entered, display an error message of your choice and loop until you get valid numbers for both x and y. Don't enforce a minimum or maximum limit for x or y.\cb1 \uc0\u8232 \u8232 \cb3 Three overloaded distance functions are also needed. They look like this:\cb1 \uc0\u8232 \cb3 \'a0 int dist(char a, char b); // return the distance between two letters (a-z)\cb1 \uc0\u8232 \cb3 \'a0 float dist(float f1, float f2); // return the distance between two floating point numbers\cb1 \uc0\u8232 \cb3 \'a0 double dist(double x1, double y1, double x2, double y2); // return distance between two points.\cb1 \uc0\u8232 \u8232 \cb3 Each distance function works a little differently. For letters, use toupper or tolower to ignore case. Note: dist(\'91A\'92, \'91c\'92), dist(\'91a\'92, \'91C\'92), dist(\'91a\'92, \'91c\'92) and dist(\'91A\'92, \'91C\'92) should all be 2. The order of the letters should not matter: dist(\'91c\'92, \'91a\'92) is also 2. For numbers, return the absolute value of the difference. For points, use the distance formula between two points: square root of ( (x2-x1) squared + (y2-y1) squared ). Look this up if you don\'92t remember it. To do the math, #include <cmath>; use abs() for absolute value; use pow(x,y) or sqrt() as needed. Look these functions up on a search engine or in the textbook for details.\cb1 \uc0\u8232 \u8232 \cb3 Three overloaded display functions are also needed. They look like this:\cb1 \uc0\u8232 \cb3 \'a0 void display(string msg, char ch1, char ch2, int d); // display letter distance\cb1 \uc0\u8232 \cb3 \'a0 void display(string msg, float f1, float f2, float d); // display number distance\cb1 \uc0\u8232 \cb3 \'a0 void display(string msg, double x1, double y1, double x2, double y2, double d); // display point distance.\cb1 \uc0\u8232 \u8232 \cb3 For the display functions, use a static local variable to keep a count of how many times the function was called. Each time the display function is called, increment the count. When the result is displayed, include the \'93call count\'94 as part of the output message. See pg 344-346 (7ed) or 363 (8ed, 9ed) for static local variables. Do not use a global value. The output should include: count, message, values of items, and their distance. See sample output below for details.\cb1 \uc0\u8232 \u8232 \cb3 Use some default parameters. Default parameters can be set in the function definition, so if the function is called with some parameters missing, the defaults are used. Defaults must be used from right to left in the function parameter list. Try using default arguments (see textbook chapter 6, section 6.12: pages 347 - 350 (7ed), or 365-368 (8ed), or 364 - 367 9ed). With default parameters, you can often reduce two or more overloaded functions to just one function.\cb1 \uc0\u8232 \u8232 \cb3 Add const to parameters where appropriate. Use const for parameters that should not change. This is not required for your program to work, but it serves as a safety net to prevent changing the value of parameters you do not want changed, such as strings (prompts, error message). Const reference parameters can be a big performance improvement, because the entire value of the parameter does not have to be copied. The most common calling mechanisms are: call-by-value, call-by-reference, and call-by-const-reference.\cb1 \uc0\u8232 \u8232 \cb3 Here is some sample output. Your program does not have to match this exactly. The extra spacing, indenting and formatting makes it easier to understand.\cb1 \uc0\u8232 \u8232 
\b\fs26\fsmilli13333 \cb3 Display the distance between two items: letters, numbers, or points.\cb1 \uc0\u8232 \u8232 \cb3 Options: l)etter; n)umber; p)oint; q)uit: l\cb1 \uc0\u8232 \cb3 \'a0 Enter first letter (a to z): b\cb1 \uc0\u8232 \cb3 \'a0 Enter second letter (a to z): f\cb1 \uc0\u8232 \cb3 \'a0 (#1) Distance between letters b & f = 4\cb1 \uc0\u8232 \u8232 \cb3 Options: l)etter; n)umber; p)oint; q)uit: n\cb1 \uc0\u8232 \cb3 \'a0 Enter first number (-100, 100): -5\cb1 \uc0\u8232 \cb3 \'a0 Enter next number (-200, 200): 20\cb1 \uc0\u8232 \cb3 \'a0 (#1) Units between -5 and 20 = 25\cb1 \uc0\u8232 \u8232 \cb3 Options: l)etter; n)umber; p)oint; q)uit: p\cb1 \uc0\u8232 \cb3 \'a0 Enter the first point (x): 0\cb1 \uc0\u8232 \cb3 \'a0 Enter the first point (y): 3\cb1 \uc0\u8232 \cb3 \'a0 Enter the second point (x): 4\cb1 \uc0\u8232 \cb3 \'a0 Enter the second point (y): 0\cb1 \uc0\u8232 \cb3 \'a0 (#1) straight line distance between points (0, 3) and (4, 0) is: 5\cb1 \uc0\u8232 \u8232 \cb3 Options: l)etter; n)umber; p)oint; q)uit: l\cb1 \uc0\u8232 \cb3 \'a0 Enter first letter (a to z): 8\cb1 \uc0\u8232 \cb3 \'a0\'a0\'a0 Sorry, try again.\cb1 \uc0\u8232 \cb3 \'a0 Enter first letter (a to z): A\cb1 \uc0\u8232 \cb3 \'a0 Enter second letter (a to z): z\cb1 \uc0\u8232 \cb3 \'a0 (#2) Distance between letters A & z = 25\cb1 \uc0\u8232 \u8232 \cb3 Options: l)etter; n)umber; p)oint; q)uit: n\cb1 \uc0\u8232 \cb3 \'a0 Enter first number (-100, 100): -123.456\cb1 \uc0\u8232 \cb3 \'a0\'a0\'a0 Sorry, out-of-range. Try again.\cb1 \uc0\u8232 \cb3 \'a0 Enter first number (-100, 100): -10\cb1 \uc0\u8232 \cb3 \'a0 Enter next number (-200, 200): 50\cb1 \uc0\u8232 \cb3 \'a0 (#2) Units between -10 and 50 = 60\cb1 \uc0\u8232 \u8232 \cb3 Options: l)etter; n)umber; p)oint; q)uit: p\cb1 \uc0\u8232 \cb3 \'a0 Enter the first point (x): 0\cb1 \uc0\u8232 \cb3 \'a0 Enter the first point (y): 0\cb1 \uc0\u8232 \cb3 \'a0 Enter the second point (x): 1\cb1 \uc0\u8232 \cb3 \'a0 Enter the second point (y): 1\cb1 \uc0\u8232 \cb3 \'a0 (#2) straight line distance between points (0, 0) and (1, 1) is: 1.41421\cb1 \uc0\u8232 \u8232 \cb3 Options: l)etter; n)umber; p)oint; q)uit: q\cb1 \uc0\u8232 \cb3 Good-bye!
\b0\fs32 \cb1 \uc0\u8232 \u8232 \cb3 Test your code. Paste the output at the bottom of your source. This lab can be written in about 100 lines of code. Knowledge and correct use of C++ skills results in smaller, cleaner code.
\f1\fs20 \
}